// modules for the program

// module to preprocess the image to load it into the graph
pub mod process_image;

// module to run inference on the given image using the graph
pub mod infer_image;

// module to process the outputs generated by the graph
pub mod process_output;

// module to use functions to show the output to the user (by printing and drawing it on the image)
pub mod show_output;

// module for solution to use (currently face detection)
pub mod mediapipe_solutions;


// use crate::process_output::conv_anchors::*;
use crate::mediapipe_solutions::face_detection::face_detection_short;

pub fn main() -> Result<(), Box<dyn std::error::Error>> {
    main_entry()?;
    Ok(())
}

// use example of the short-range face detection solution\
use std::env;
#[no_mangle]
fn main_entry() -> Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = env::args().collect();
    let model_bin_name: &str = &args[1];
    let image_name: &str = &args[2];

    face_detection_short(model_bin_name, image_name)?;
    Ok(())
}

// A wrapper for class ID and match probabilities.
#[derive(Debug, PartialEq)]
struct InferenceResult(usize, u8);
